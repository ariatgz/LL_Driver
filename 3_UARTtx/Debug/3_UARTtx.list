
3_UARTtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b64  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d28  08000d38  00001d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d28  08000d28  00001d38  2**0
                  CONTENTS
  4 .ARM          00000008  08000d28  08000d28  00001d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d30  08000d38  00001d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d30  08000d30  00001d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d34  08000d34  00001d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000d38  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000d38  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008d5  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000263  00000000  00000000  0000263d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  000028a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007b  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f30  00000000  00000000  000029cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000086a  00000000  00000000  0001b8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d39e  00000000  00000000  0001c165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002c0  00000000  00000000  000a9548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000a9808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d10 	.word	0x08000d10

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000d10 	.word	0x08000d10

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	60da      	str	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	60da      	str	r2, [r3, #12]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LL_USART_SetTransferDirection>:
  *         @arg @ref LL_USART_DIRECTION_TX
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 8000534:	b480      	push	{r7}
 8000536:	b089      	sub	sp, #36	@ 0x24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	330c      	adds	r3, #12
 8000542:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	e853 3f00 	ldrex	r3, [r3]
 800054a:	60bb      	str	r3, [r7, #8]
   return(result);
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	f023 030c 	bic.w	r3, r3, #12
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	4313      	orrs	r3, r2
 8000556:	61fb      	str	r3, [r7, #28]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	330c      	adds	r3, #12
 800055c:	69fa      	ldr	r2, [r7, #28]
 800055e:	61ba      	str	r2, [r7, #24]
 8000560:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000562:	6979      	ldr	r1, [r7, #20]
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	e841 2300 	strex	r3, r2, [r1]
 800056a:	613b      	str	r3, [r7, #16]
   return(result);
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1e5      	bne.n	800053e <LL_USART_SetTransferDirection+0xa>
}
 8000572:	bf00      	nop
 8000574:	bf00      	nop
 8000576:	3724      	adds	r7, #36	@ 0x24
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <LL_USART_ConfigCharacter>:
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	f423 52b0 	bic.w	r2, r3, #5632	@ 0x1600
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	430b      	orrs	r3, r1
 800059c:	431a      	orrs	r2, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	431a      	orrs	r2, r3
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	611a      	str	r2, [r3, #16]
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80005c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005c4:	b0c0      	sub	sp, #256	@ 0x100
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80005cc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80005d0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80005d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80005d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80005dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005e0:	f040 810c 	bne.w	80007fc <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80005e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80005e8:	2200      	movs	r2, #0
 80005ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80005ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80005f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80005f6:	4622      	mov	r2, r4
 80005f8:	462b      	mov	r3, r5
 80005fa:	1891      	adds	r1, r2, r2
 80005fc:	6639      	str	r1, [r7, #96]	@ 0x60
 80005fe:	415b      	adcs	r3, r3
 8000600:	667b      	str	r3, [r7, #100]	@ 0x64
 8000602:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000606:	4621      	mov	r1, r4
 8000608:	eb12 0801 	adds.w	r8, r2, r1
 800060c:	4629      	mov	r1, r5
 800060e:	eb43 0901 	adc.w	r9, r3, r1
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800061e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000626:	4690      	mov	r8, r2
 8000628:	4699      	mov	r9, r3
 800062a:	4623      	mov	r3, r4
 800062c:	eb18 0303 	adds.w	r3, r8, r3
 8000630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000634:	462b      	mov	r3, r5
 8000636:	eb49 0303 	adc.w	r3, r9, r3
 800063a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800063e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000642:	2200      	movs	r2, #0
 8000644:	469a      	mov	sl, r3
 8000646:	4693      	mov	fp, r2
 8000648:	eb1a 030a 	adds.w	r3, sl, sl
 800064c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800064e:	eb4b 030b 	adc.w	r3, fp, fp
 8000652:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000654:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000658:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800065c:	f7ff fdd2 	bl	8000204 <__aeabi_uldivmod>
 8000660:	4602      	mov	r2, r0
 8000662:	460b      	mov	r3, r1
 8000664:	4b64      	ldr	r3, [pc, #400]	@ (80007f8 <LL_USART_SetBaudRate+0x238>)
 8000666:	fba3 2302 	umull	r2, r3, r3, r2
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	b29b      	uxth	r3, r3
 800066e:	011b      	lsls	r3, r3, #4
 8000670:	b29c      	uxth	r4, r3
 8000672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000676:	2200      	movs	r2, #0
 8000678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800067c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000680:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8000684:	4642      	mov	r2, r8
 8000686:	464b      	mov	r3, r9
 8000688:	1891      	adds	r1, r2, r2
 800068a:	6539      	str	r1, [r7, #80]	@ 0x50
 800068c:	415b      	adcs	r3, r3
 800068e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000694:	4641      	mov	r1, r8
 8000696:	1851      	adds	r1, r2, r1
 8000698:	64b9      	str	r1, [r7, #72]	@ 0x48
 800069a:	4649      	mov	r1, r9
 800069c:	414b      	adcs	r3, r1
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80006a0:	f04f 0200 	mov.w	r2, #0
 80006a4:	f04f 0300 	mov.w	r3, #0
 80006a8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80006ac:	4659      	mov	r1, fp
 80006ae:	00cb      	lsls	r3, r1, #3
 80006b0:	4651      	mov	r1, sl
 80006b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80006b6:	4651      	mov	r1, sl
 80006b8:	00ca      	lsls	r2, r1, #3
 80006ba:	4610      	mov	r0, r2
 80006bc:	4619      	mov	r1, r3
 80006be:	4603      	mov	r3, r0
 80006c0:	4642      	mov	r2, r8
 80006c2:	189b      	adds	r3, r3, r2
 80006c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80006c8:	464b      	mov	r3, r9
 80006ca:	460a      	mov	r2, r1
 80006cc:	eb42 0303 	adc.w	r3, r2, r3
 80006d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80006d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80006d8:	2200      	movs	r2, #0
 80006da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80006de:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80006e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80006e6:	460b      	mov	r3, r1
 80006e8:	18db      	adds	r3, r3, r3
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80006ec:	4613      	mov	r3, r2
 80006ee:	eb42 0303 	adc.w	r3, r2, r3
 80006f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80006f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80006f8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80006fc:	f7ff fd82 	bl	8000204 <__aeabi_uldivmod>
 8000700:	4602      	mov	r2, r0
 8000702:	460b      	mov	r3, r1
 8000704:	4611      	mov	r1, r2
 8000706:	4b3c      	ldr	r3, [pc, #240]	@ (80007f8 <LL_USART_SetBaudRate+0x238>)
 8000708:	fba3 2301 	umull	r2, r3, r3, r1
 800070c:	095b      	lsrs	r3, r3, #5
 800070e:	2264      	movs	r2, #100	@ 0x64
 8000710:	fb02 f303 	mul.w	r3, r2, r3
 8000714:	1acb      	subs	r3, r1, r3
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800071c:	4b36      	ldr	r3, [pc, #216]	@ (80007f8 <LL_USART_SetBaudRate+0x238>)
 800071e:	fba3 2302 	umull	r2, r3, r3, r2
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	b29b      	uxth	r3, r3
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	b29b      	uxth	r3, r3
 800072a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800072e:	b29b      	uxth	r3, r3
 8000730:	4423      	add	r3, r4
 8000732:	b29c      	uxth	r4, r3
 8000734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000738:	2200      	movs	r2, #0
 800073a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800073e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000742:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8000746:	4642      	mov	r2, r8
 8000748:	464b      	mov	r3, r9
 800074a:	1891      	adds	r1, r2, r2
 800074c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800074e:	415b      	adcs	r3, r3
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000752:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000756:	4641      	mov	r1, r8
 8000758:	1851      	adds	r1, r2, r1
 800075a:	6339      	str	r1, [r7, #48]	@ 0x30
 800075c:	4649      	mov	r1, r9
 800075e:	414b      	adcs	r3, r1
 8000760:	637b      	str	r3, [r7, #52]	@ 0x34
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	f04f 0300 	mov.w	r3, #0
 800076a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800076e:	4659      	mov	r1, fp
 8000770:	00cb      	lsls	r3, r1, #3
 8000772:	4651      	mov	r1, sl
 8000774:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000778:	4651      	mov	r1, sl
 800077a:	00ca      	lsls	r2, r1, #3
 800077c:	4610      	mov	r0, r2
 800077e:	4619      	mov	r1, r3
 8000780:	4603      	mov	r3, r0
 8000782:	4642      	mov	r2, r8
 8000784:	189b      	adds	r3, r3, r2
 8000786:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800078a:	464b      	mov	r3, r9
 800078c:	460a      	mov	r2, r1
 800078e:	eb42 0303 	adc.w	r3, r2, r3
 8000792:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000796:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800079a:	2200      	movs	r2, #0
 800079c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80007a0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80007a4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80007a8:	460b      	mov	r3, r1
 80007aa:	18db      	adds	r3, r3, r3
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007ae:	4613      	mov	r3, r2
 80007b0:	eb42 0303 	adc.w	r3, r2, r3
 80007b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80007ba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80007be:	f7ff fd21 	bl	8000204 <__aeabi_uldivmod>
 80007c2:	4602      	mov	r2, r0
 80007c4:	460b      	mov	r3, r1
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <LL_USART_SetBaudRate+0x238>)
 80007c8:	fba3 1302 	umull	r1, r3, r3, r2
 80007cc:	095b      	lsrs	r3, r3, #5
 80007ce:	2164      	movs	r1, #100	@ 0x64
 80007d0:	fb01 f303 	mul.w	r3, r1, r3
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	3332      	adds	r3, #50	@ 0x32
 80007da:	4a07      	ldr	r2, [pc, #28]	@ (80007f8 <LL_USART_SetBaudRate+0x238>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	095b      	lsrs	r3, r3, #5
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f003 0307 	and.w	r3, r3, #7
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4423      	add	r3, r4
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80007f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80007f6:	e108      	b.n	8000a0a <LL_USART_SetBaudRate+0x44a>
 80007f8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80007fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000800:	2200      	movs	r2, #0
 8000802:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000806:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800080a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800080e:	4642      	mov	r2, r8
 8000810:	464b      	mov	r3, r9
 8000812:	1891      	adds	r1, r2, r2
 8000814:	6239      	str	r1, [r7, #32]
 8000816:	415b      	adcs	r3, r3
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
 800081a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800081e:	4641      	mov	r1, r8
 8000820:	1854      	adds	r4, r2, r1
 8000822:	4649      	mov	r1, r9
 8000824:	eb43 0501 	adc.w	r5, r3, r1
 8000828:	f04f 0200 	mov.w	r2, #0
 800082c:	f04f 0300 	mov.w	r3, #0
 8000830:	00eb      	lsls	r3, r5, #3
 8000832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000836:	00e2      	lsls	r2, r4, #3
 8000838:	4614      	mov	r4, r2
 800083a:	461d      	mov	r5, r3
 800083c:	4643      	mov	r3, r8
 800083e:	18e3      	adds	r3, r4, r3
 8000840:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000844:	464b      	mov	r3, r9
 8000846:	eb45 0303 	adc.w	r3, r5, r3
 800084a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800084e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000852:	2200      	movs	r2, #0
 8000854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000858:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800085c:	f04f 0200 	mov.w	r2, #0
 8000860:	f04f 0300 	mov.w	r3, #0
 8000864:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8000868:	4629      	mov	r1, r5
 800086a:	008b      	lsls	r3, r1, #2
 800086c:	4621      	mov	r1, r4
 800086e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000872:	4621      	mov	r1, r4
 8000874:	008a      	lsls	r2, r1, #2
 8000876:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800087a:	f7ff fcc3 	bl	8000204 <__aeabi_uldivmod>
 800087e:	4602      	mov	r2, r0
 8000880:	460b      	mov	r3, r1
 8000882:	4b65      	ldr	r3, [pc, #404]	@ (8000a18 <LL_USART_SetBaudRate+0x458>)
 8000884:	fba3 2302 	umull	r2, r3, r3, r2
 8000888:	095b      	lsrs	r3, r3, #5
 800088a:	b29b      	uxth	r3, r3
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	b29c      	uxth	r4, r3
 8000890:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000894:	2200      	movs	r2, #0
 8000896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800089a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800089e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80008a2:	4642      	mov	r2, r8
 80008a4:	464b      	mov	r3, r9
 80008a6:	1891      	adds	r1, r2, r2
 80008a8:	61b9      	str	r1, [r7, #24]
 80008aa:	415b      	adcs	r3, r3
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80008b2:	4641      	mov	r1, r8
 80008b4:	1851      	adds	r1, r2, r1
 80008b6:	6139      	str	r1, [r7, #16]
 80008b8:	4649      	mov	r1, r9
 80008ba:	414b      	adcs	r3, r1
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	f04f 0200 	mov.w	r2, #0
 80008c2:	f04f 0300 	mov.w	r3, #0
 80008c6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80008ca:	4659      	mov	r1, fp
 80008cc:	00cb      	lsls	r3, r1, #3
 80008ce:	4651      	mov	r1, sl
 80008d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80008d4:	4651      	mov	r1, sl
 80008d6:	00ca      	lsls	r2, r1, #3
 80008d8:	4610      	mov	r0, r2
 80008da:	4619      	mov	r1, r3
 80008dc:	4603      	mov	r3, r0
 80008de:	4642      	mov	r2, r8
 80008e0:	189b      	adds	r3, r3, r2
 80008e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80008e6:	464b      	mov	r3, r9
 80008e8:	460a      	mov	r2, r1
 80008ea:	eb42 0303 	adc.w	r3, r2, r3
 80008ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80008f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80008f6:	2200      	movs	r2, #0
 80008f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80008fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800090c:	4649      	mov	r1, r9
 800090e:	008b      	lsls	r3, r1, #2
 8000910:	4641      	mov	r1, r8
 8000912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000916:	4641      	mov	r1, r8
 8000918:	008a      	lsls	r2, r1, #2
 800091a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800091e:	f7ff fc71 	bl	8000204 <__aeabi_uldivmod>
 8000922:	4602      	mov	r2, r0
 8000924:	460b      	mov	r3, r1
 8000926:	4611      	mov	r1, r2
 8000928:	4b3b      	ldr	r3, [pc, #236]	@ (8000a18 <LL_USART_SetBaudRate+0x458>)
 800092a:	fba3 2301 	umull	r2, r3, r3, r1
 800092e:	095b      	lsrs	r3, r3, #5
 8000930:	2264      	movs	r2, #100	@ 0x64
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	1acb      	subs	r3, r1, r3
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	3332      	adds	r3, #50	@ 0x32
 800093c:	4a36      	ldr	r2, [pc, #216]	@ (8000a18 <LL_USART_SetBaudRate+0x458>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	b29b      	uxth	r3, r3
 8000946:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800094a:	b29b      	uxth	r3, r3
 800094c:	4423      	add	r3, r4
 800094e:	b29c      	uxth	r4, r3
 8000950:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000954:	2200      	movs	r2, #0
 8000956:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000958:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800095a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800095e:	4642      	mov	r2, r8
 8000960:	464b      	mov	r3, r9
 8000962:	1891      	adds	r1, r2, r2
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	415b      	adcs	r3, r3
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800096e:	4641      	mov	r1, r8
 8000970:	1851      	adds	r1, r2, r1
 8000972:	6039      	str	r1, [r7, #0]
 8000974:	4649      	mov	r1, r9
 8000976:	414b      	adcs	r3, r1
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8000986:	4659      	mov	r1, fp
 8000988:	00cb      	lsls	r3, r1, #3
 800098a:	4651      	mov	r1, sl
 800098c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000990:	4651      	mov	r1, sl
 8000992:	00ca      	lsls	r2, r1, #3
 8000994:	4610      	mov	r0, r2
 8000996:	4619      	mov	r1, r3
 8000998:	4603      	mov	r3, r0
 800099a:	4642      	mov	r2, r8
 800099c:	189b      	adds	r3, r3, r2
 800099e:	673b      	str	r3, [r7, #112]	@ 0x70
 80009a0:	464b      	mov	r3, r9
 80009a2:	460a      	mov	r2, r1
 80009a4:	eb42 0303 	adc.w	r3, r2, r3
 80009a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80009aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80009ae:	2200      	movs	r2, #0
 80009b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80009b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80009b4:	f04f 0200 	mov.w	r2, #0
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80009c0:	4649      	mov	r1, r9
 80009c2:	008b      	lsls	r3, r1, #2
 80009c4:	4641      	mov	r1, r8
 80009c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80009ca:	4641      	mov	r1, r8
 80009cc:	008a      	lsls	r2, r1, #2
 80009ce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80009d2:	f7ff fc17 	bl	8000204 <__aeabi_uldivmod>
 80009d6:	4602      	mov	r2, r0
 80009d8:	460b      	mov	r3, r1
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <LL_USART_SetBaudRate+0x458>)
 80009dc:	fba3 1302 	umull	r1, r3, r3, r2
 80009e0:	095b      	lsrs	r3, r3, #5
 80009e2:	2164      	movs	r1, #100	@ 0x64
 80009e4:	fb01 f303 	mul.w	r3, r1, r3
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	011b      	lsls	r3, r3, #4
 80009ec:	3332      	adds	r3, #50	@ 0x32
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <LL_USART_SetBaudRate+0x458>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	095b      	lsrs	r3, r3, #5
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	f003 030f 	and.w	r3, r3, #15
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	4423      	add	r3, r4
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000a08:	609a      	str	r2, [r3, #8]
}
 8000a0a:	bf00      	nop
 8000a0c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000a10:	46bd      	mov	sp, r7
 8000a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000a16:	bf00      	nop
 8000a18:	51eb851f 	.word	0x51eb851f

08000a1c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2c:	2b80      	cmp	r3, #128	@ 0x80
 8000a2e:	bf0c      	ite	eq
 8000a30:	2301      	moveq	r3, #1
 8000a32:	2300      	movne	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000a4e:	78fa      	ldrb	r2, [r7, #3]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	605a      	str	r2, [r3, #4]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b08b      	sub	sp, #44	@ 0x2c
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa93 f3a3 	rbit	r3, r3
 8000a7a:	613b      	str	r3, [r7, #16]
  return result;
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000a86:	2320      	movs	r3, #32
 8000a88:	e003      	b.n	8000a92 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	fab3 f383 	clz	r3, r3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2103      	movs	r1, #3
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa2:	6a3b      	ldr	r3, [r7, #32]
 8000aa4:	fa93 f3a3 	rbit	r3, r3
 8000aa8:	61fb      	str	r3, [r7, #28]
  return result;
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d101      	bne.n	8000ab8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	e003      	b.n	8000ac0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aba:	fab3 f383 	clz	r3, r3
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	372c      	adds	r7, #44	@ 0x2c
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b08b      	sub	sp, #44	@ 0x2c
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6a1a      	ldr	r2, [r3, #32]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	fa93 f3a3 	rbit	r3, r3
 8000af4:	613b      	str	r3, [r7, #16]
  return result;
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000b00:	2320      	movs	r3, #32
 8000b02:	e003      	b.n	8000b0c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fab3 f383 	clz	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	210f      	movs	r1, #15
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	401a      	ands	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
 8000b1e:	fa93 f3a3 	rbit	r3, r3
 8000b22:	61fb      	str	r3, [r7, #28]
  return result;
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000b2e:	2320      	movs	r3, #32
 8000b30:	e003      	b.n	8000b3a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	fab3 f383 	clz	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	431a      	orrs	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000b48:	bf00      	nop
 8000b4a:	372c      	adds	r7, #44	@ 0x2c
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b60:	4907      	ldr	r1, [pc, #28]	@ (8000b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40023800 	.word	0x40023800

08000b84 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b90:	4907      	ldr	r1, [pc, #28]	@ (8000bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <main>:

void uart2_init(void);
void uart2_write(int ch);


int main(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

	uart2_init();
 8000bba:	f000 f811 	bl	8000be0 <uart2_init>
	while(1){

		uart2_write('Y');
 8000bbe:	2059      	movs	r0, #89	@ 0x59
 8000bc0:	f000 f840 	bl	8000c44 <uart2_write>
		for(int itr=0;itr<90000;itr++){
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	e002      	b.n	8000bd0 <main+0x1c>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a02      	ldr	r2, [pc, #8]	@ (8000bdc <main+0x28>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	ddf8      	ble.n	8000bca <main+0x16>
		uart2_write('Y');
 8000bd8:	e7f1      	b.n	8000bbe <main+0xa>
 8000bda:	bf00      	nop
 8000bdc:	00015f8f 	.word	0x00015f8f

08000be0 <uart2_init>:



}

void uart2_init(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

	//Enable clock access for UART GPIO Pin.
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff ffb5 	bl	8000b54 <LL_AHB1_GRP1_EnableClock>

	// clock access to UART module
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000bea:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000bee:	f7ff ffc9 	bl	8000b84 <LL_APB1_GRP1_EnableClock>

	// set mode of uart tx pin to AF
	LL_GPIO_SetPinMode(GPIOA,LL_GPIO_PIN_2 , LL_GPIO_MODE_ALTERNATE);
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4810      	ldr	r0, [pc, #64]	@ (8000c38 <uart2_init+0x58>)
 8000bf8:	f7ff ff32 	bl	8000a60 <LL_GPIO_SetPinMode>

	// select uart tx alternate function type
	LL_GPIO_SetAFPin_0_7(GPIOA,LL_GPIO_PIN_2,LL_GPIO_AF_7 );
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	2104      	movs	r1, #4
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <uart2_init+0x58>)
 8000c02:	f7ff ff6a 	bl	8000ada <LL_GPIO_SetAFPin_0_7>

	// configure uart protocol parameters
	LL_USART_Disable(USART2);
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <uart2_init+0x5c>)
 8000c08:	f7ff fc84 	bl	8000514 <LL_USART_Disable>

	LL_USART_SetTransferDirection(USART2,LL_USART_DIRECTION_TX);
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <uart2_init+0x5c>)
 8000c10:	f7ff fc90 	bl	8000534 <LL_USART_SetTransferDirection>

	//Configure all USART module parameters in one function.
	LL_USART_ConfigCharacter(USART2, LL_USART_DATAWIDTH_8B,LL_USART_PARITY_NONE, LL_USART_STOPBITS_1);
 8000c14:	2300      	movs	r3, #0
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4808      	ldr	r0, [pc, #32]	@ (8000c3c <uart2_init+0x5c>)
 8000c1c:	f7ff fcb0 	bl	8000580 <LL_USART_ConfigCharacter>

	LL_USART_SetBaudRate(USART2, 16000000,
 8000c20:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000c24:	2200      	movs	r2, #0
 8000c26:	4906      	ldr	r1, [pc, #24]	@ (8000c40 <uart2_init+0x60>)
 8000c28:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <uart2_init+0x5c>)
 8000c2a:	f7ff fcc9 	bl	80005c0 <LL_USART_SetBaudRate>
			LL_USART_OVERSAMPLING_16, 115200);

	LL_USART_Enable(USART2);
 8000c2e:	4803      	ldr	r0, [pc, #12]	@ (8000c3c <uart2_init+0x5c>)
 8000c30:	f7ff fc60 	bl	80004f4 <LL_USART_Enable>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	00f42400 	.word	0x00f42400

08000c44 <uart2_write>:

void uart2_write(int ch){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]


	//wait for TXE flag to be set.

	while(!LL_USART_IsActiveFlag_TXE(USART2)){}
 8000c4c:	bf00      	nop
 8000c4e:	4808      	ldr	r0, [pc, #32]	@ (8000c70 <uart2_write+0x2c>)
 8000c50:	f7ff fee4 	bl	8000a1c <LL_USART_IsActiveFlag_TXE>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f9      	beq.n	8000c4e <uart2_write+0xa>
	LL_USART_TransmitData8(USART2,ch);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <uart2_write+0x2c>)
 8000c62:	f7ff feee 	bl	8000a42 <LL_USART_TransmitData8>


}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004400 	.word	0x40004400

08000c74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c74:	480d      	ldr	r0, [pc, #52]	@ (8000cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c78:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ca2:	f000 f811 	bl	8000cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff ff85 	bl	8000bb4 <main>

08000caa <LoopForever>:

LoopForever:
  b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   r0, =_estack
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cb8:	08000d38 	.word	0x08000d38
  ldr r2, =_sbss
 8000cbc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cc0:	2000001c 	.word	0x2000001c

08000cc4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <__libc_init_array>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	4d0d      	ldr	r5, [pc, #52]	@ (8000d00 <__libc_init_array+0x38>)
 8000ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8000d04 <__libc_init_array+0x3c>)
 8000cce:	1b64      	subs	r4, r4, r5
 8000cd0:	10a4      	asrs	r4, r4, #2
 8000cd2:	2600      	movs	r6, #0
 8000cd4:	42a6      	cmp	r6, r4
 8000cd6:	d109      	bne.n	8000cec <__libc_init_array+0x24>
 8000cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8000d08 <__libc_init_array+0x40>)
 8000cda:	4c0c      	ldr	r4, [pc, #48]	@ (8000d0c <__libc_init_array+0x44>)
 8000cdc:	f000 f818 	bl	8000d10 <_init>
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	10a4      	asrs	r4, r4, #2
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	42a6      	cmp	r6, r4
 8000ce8:	d105      	bne.n	8000cf6 <__libc_init_array+0x2e>
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf0:	4798      	blx	r3
 8000cf2:	3601      	adds	r6, #1
 8000cf4:	e7ee      	b.n	8000cd4 <__libc_init_array+0xc>
 8000cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfa:	4798      	blx	r3
 8000cfc:	3601      	adds	r6, #1
 8000cfe:	e7f2      	b.n	8000ce6 <__libc_init_array+0x1e>
 8000d00:	08000d30 	.word	0x08000d30
 8000d04:	08000d30 	.word	0x08000d30
 8000d08:	08000d30 	.word	0x08000d30
 8000d0c:	08000d34 	.word	0x08000d34

08000d10 <_init>:
 8000d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d12:	bf00      	nop
 8000d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d16:	bc08      	pop	{r3}
 8000d18:	469e      	mov	lr, r3
 8000d1a:	4770      	bx	lr

08000d1c <_fini>:
 8000d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1e:	bf00      	nop
 8000d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d22:	bc08      	pop	{r3}
 8000d24:	469e      	mov	lr, r3
 8000d26:	4770      	bx	lr

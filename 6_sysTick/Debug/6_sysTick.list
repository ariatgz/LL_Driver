
6_sysTick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004bc  080004c4  000014c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004bc  080004bc  000014c4  2**0
                  CONTENTS
  4 .ARM          00000000  080004bc  080004bc  000014c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004bc  080004c4  000014c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c0  080004c0  000014c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004c4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004c4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000147f  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000497  00000000  00000000  00002973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00002e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000010e  00000000  00000000  00002f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae00  00000000  00000000  00003096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001212  00000000  00000000  0001de96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000996e9  00000000  00000000  0001f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000554  00000000  00000000  000b87d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b8d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004a4 	.word	0x080004a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004a4 	.word	0x080004a4

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3b01      	subs	r3, #1
 8000264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000268:	d301      	bcc.n	800026e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800026a:	2301      	movs	r3, #1
 800026c:	e00f      	b.n	800028e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026e:	4a0a      	ldr	r2, [pc, #40]	@ (8000298 <SysTick_Config+0x40>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3b01      	subs	r3, #1
 8000274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000276:	210f      	movs	r1, #15
 8000278:	f04f 30ff 	mov.w	r0, #4294967295
 800027c:	f7ff ffc2 	bl	8000204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	4b05      	ldr	r3, [pc, #20]	@ (8000298 <SysTick_Config+0x40>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000286:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <SysTick_Config+0x40>)
 8000288:	2207      	movs	r2, #7
 800028a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	e000e010 	.word	0xe000e010

0800029c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800029c:	b480      	push	{r7}
 800029e:	b08b      	sub	sp, #44	@ 0x2c
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	fa93 f3a3 	rbit	r3, r3
 80002b6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80002bc:	69bb      	ldr	r3, [r7, #24]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80002c2:	2320      	movs	r3, #32
 80002c4:	e003      	b.n	80002ce <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80002c6:	69bb      	ldr	r3, [r7, #24]
 80002c8:	fab3 f383 	clz	r3, r3
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002de:	6a3b      	ldr	r3, [r7, #32]
 80002e0:	fa93 f3a3 	rbit	r3, r3
 80002e4:	61fb      	str	r3, [r7, #28]
  return result;
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80002ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d101      	bne.n	80002f4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80002f0:	2320      	movs	r3, #32
 80002f2:	e003      	b.n	80002fc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80002f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002f6:	fab3 f383 	clz	r3, r3
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	fa01 f303 	lsl.w	r3, r1, r3
 8000304:	431a      	orrs	r2, r3
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	372c      	adds	r7, #44	@ 0x2c
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000316:	b480      	push	{r7}
 8000318:	b085      	sub	sp, #20
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
 800031e:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	4013      	ands	r3, r2
 800032c:	041a      	lsls	r2, r3, #16
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	43d9      	mvns	r1, r3
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	400b      	ands	r3, r1
 8000336:	431a      	orrs	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	619a      	str	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000350:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000354:	4907      	ldr	r1, [pc, #28]	@ (8000374 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4313      	orrs	r3, r2
 800035a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800035c:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800035e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4013      	ands	r3, r2
 8000364:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000366:	68fb      	ldr	r3, [r7, #12]
}
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	40023800 	.word	0x40023800

08000378 <main>:
#include"stm32f4xx_ll_system.h"
#include"stm32f4xx_ll_utils.h"
#include"stm32f4xx_ll_gpio.h"
#include"stm32f4xx_ll_bus.h"

int main(void){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

	SysTick_Config(16000);
 800037c:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8000380:	f7ff ff6a 	bl	8000258 <SysTick_Config>

	//Enable the clock
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000384:	2001      	movs	r0, #1
 8000386:	f7ff ffdf 	bl	8000348 <LL_AHB1_GRP1_EnableClock>

	//setting the mode of the port A pin 5.
	LL_GPIO_SetPinMode (GPIOA,LL_GPIO_PIN_5 , LL_GPIO_MODE_OUTPUT);
 800038a:	2201      	movs	r2, #1
 800038c:	2120      	movs	r1, #32
 800038e:	4806      	ldr	r0, [pc, #24]	@ (80003a8 <main+0x30>)
 8000390:	f7ff ff84 	bl	800029c <LL_GPIO_SetPinMode>

	while(1){

			//Toggle the state of the pin in the specified port.
			LL_GPIO_TogglePin(GPIOA,LL_GPIO_PIN_5);
 8000394:	2120      	movs	r1, #32
 8000396:	4804      	ldr	r0, [pc, #16]	@ (80003a8 <main+0x30>)
 8000398:	f7ff ffbd 	bl	8000316 <LL_GPIO_TogglePin>
			LL_mDelay(1000);
 800039c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003a0:	f000 f80c 	bl	80003bc <LL_mDelay>
			LL_GPIO_TogglePin(GPIOA,LL_GPIO_PIN_5);
 80003a4:	bf00      	nop
 80003a6:	e7f5      	b.n	8000394 <main+0x1c>
 80003a8:	40020000 	.word	0x40020000

080003ac <SysTick_Handler>:
		}


}

void SysTick_Handler(void){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0

}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
	...

080003bc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <LL_mDelay+0x48>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80003ca:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003d2:	d00c      	beq.n	80003ee <LL_mDelay+0x32>
  {
    Delay++;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3301      	adds	r3, #1
 80003d8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80003da:	e008      	b.n	80003ee <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80003dc:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <LL_mDelay+0x48>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d002      	beq.n	80003ee <LL_mDelay+0x32>
    {
      Delay--;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	607b      	str	r3, [r7, #4]
  while (Delay)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f3      	bne.n	80003dc <LL_mDelay+0x20>
    }
  }
}
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000e010 	.word	0xe000e010

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	@ (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	@ (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f000 f811 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f7ff ff9d 	bl	8000378 <main>

0800043e <LoopForever>:

LoopForever:
  b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800044c:	080004c4 	.word	0x080004c4
  ldr r2, =_sbss
 8000450:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000454:	2000001c 	.word	0x2000001c

08000458 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC_IRQHandler>
	...

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	@ (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	@ (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	@ (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	@ (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004bc 	.word	0x080004bc
 8000498:	080004bc 	.word	0x080004bc
 800049c:	080004bc 	.word	0x080004bc
 80004a0:	080004c0 	.word	0x080004c0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr

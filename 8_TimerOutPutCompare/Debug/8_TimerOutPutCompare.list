
8_TimerOutPutCompare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000404  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080005c8  080005c8  000015c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005d8  080005d8  000015e0  2**0
                  CONTENTS
  4 .ARM          00000000  080005d8  080005d8  000015e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d8  080005e0  000015e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d8  080005d8  000015d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005dc  080005dc  000015dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005e0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005e0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000886  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001e7  00000000  00000000  00001e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000075  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019353  00000000  00000000  0000219d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000840  00000000  00000000  0001b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f665  00000000  00000000  0001bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab395  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000220  00000000  00000000  000ab3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ab5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005b0 	.word	0x080005b0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080005b0 	.word	0x080005b0

08000204 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800020c:	4b08      	ldr	r3, [pc, #32]	@ (8000230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800020e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000210:	4907      	ldr	r1, [pc, #28]	@ (8000230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4313      	orrs	r3, r2
 8000216:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000218:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800021a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4013      	ands	r3, r2
 8000220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000222:	68fb      	ldr	r3, [r7, #12]
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	40023800 	.word	0x40023800

08000234 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800023c:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <LL_APB1_GRP1_EnableClock+0x2c>)
 800023e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000240:	4907      	ldr	r1, [pc, #28]	@ (8000260 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4313      	orrs	r3, r2
 8000246:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <LL_APB1_GRP1_EnableClock+0x2c>)
 800024a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4013      	ands	r3, r2
 8000250:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000252:	68fb      	ldr	r3, [r7, #12]
}
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	40023800 	.word	0x40023800

08000264 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000264:	b480      	push	{r7}
 8000266:	b08b      	sub	sp, #44	@ 0x2c
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	fa93 f3a3 	rbit	r3, r3
 800027e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d101      	bne.n	800028e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800028a:	2320      	movs	r3, #32
 800028c:	e003      	b.n	8000296 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	fab3 f383 	clz	r3, r3
 8000294:	b2db      	uxtb	r3, r3
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	2103      	movs	r1, #3
 800029a:	fa01 f303 	lsl.w	r3, r1, r3
 800029e:	43db      	mvns	r3, r3
 80002a0:	401a      	ands	r2, r3
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a6:	6a3b      	ldr	r3, [r7, #32]
 80002a8:	fa93 f3a3 	rbit	r3, r3
 80002ac:	61fb      	str	r3, [r7, #28]
  return result;
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80002b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80002b8:	2320      	movs	r3, #32
 80002ba:	e003      	b.n	80002c4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80002bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002be:	fab3 f383 	clz	r3, r3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	6879      	ldr	r1, [r7, #4]
 80002c8:	fa01 f303 	lsl.w	r3, r1, r3
 80002cc:	431a      	orrs	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	601a      	str	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	372c      	adds	r7, #44	@ 0x2c
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80002de:	b480      	push	{r7}
 80002e0:	b08b      	sub	sp, #44	@ 0x2c
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	6a1a      	ldr	r2, [r3, #32]
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	fa93 f3a3 	rbit	r3, r3
 80002f8:	613b      	str	r3, [r7, #16]
  return result;
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000304:	2320      	movs	r3, #32
 8000306:	e003      	b.n	8000310 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000308:	69bb      	ldr	r3, [r7, #24]
 800030a:	fab3 f383 	clz	r3, r3
 800030e:	b2db      	uxtb	r3, r3
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	210f      	movs	r1, #15
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	43db      	mvns	r3, r3
 800031a:	401a      	ands	r2, r3
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000320:	6a3b      	ldr	r3, [r7, #32]
 8000322:	fa93 f3a3 	rbit	r3, r3
 8000326:	61fb      	str	r3, [r7, #28]
  return result;
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800032c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800032e:	2b00      	cmp	r3, #0
 8000330:	d101      	bne.n	8000336 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000332:	2320      	movs	r3, #32
 8000334:	e003      	b.n	800033e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000338:	fab3 f383 	clz	r3, r3
 800033c:	b2db      	uxtb	r3, r3
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	431a      	orrs	r2, r3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800034c:	bf00      	nop
 800034e:	372c      	adds	r7, #44	@ 0x2c
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f043 0201 	orr.w	r2, r3, #1
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	601a      	str	r2, [r3, #0]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	683a      	ldr	r2, [r7, #0]
 80003be:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6a1a      	ldr	r2, [r3, #32]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	621a      	str	r2, [r3, #32]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
	...

080003f0 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PWM1
  *         @arg @ref LL_TIM_OCMODE_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d01c      	beq.n	800043c <LL_TIM_OC_SetMode+0x4c>
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	2b04      	cmp	r3, #4
 8000406:	d017      	beq.n	8000438 <LL_TIM_OC_SetMode+0x48>
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	2b10      	cmp	r3, #16
 800040c:	d012      	beq.n	8000434 <LL_TIM_OC_SetMode+0x44>
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	2b40      	cmp	r3, #64	@ 0x40
 8000412:	d00d      	beq.n	8000430 <LL_TIM_OC_SetMode+0x40>
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800041a:	d007      	beq.n	800042c <LL_TIM_OC_SetMode+0x3c>
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000422:	d101      	bne.n	8000428 <LL_TIM_OC_SetMode+0x38>
 8000424:	2305      	movs	r3, #5
 8000426:	e00a      	b.n	800043e <LL_TIM_OC_SetMode+0x4e>
 8000428:	2306      	movs	r3, #6
 800042a:	e008      	b.n	800043e <LL_TIM_OC_SetMode+0x4e>
 800042c:	2304      	movs	r3, #4
 800042e:	e006      	b.n	800043e <LL_TIM_OC_SetMode+0x4e>
 8000430:	2303      	movs	r3, #3
 8000432:	e004      	b.n	800043e <LL_TIM_OC_SetMode+0x4e>
 8000434:	2302      	movs	r3, #2
 8000436:	e002      	b.n	800043e <LL_TIM_OC_SetMode+0x4e>
 8000438:	2301      	movs	r3, #1
 800043a:	e000      	b.n	800043e <LL_TIM_OC_SetMode+0x4e>
 800043c:	2300      	movs	r3, #0
 800043e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	3318      	adds	r3, #24
 8000444:	4619      	mov	r1, r3
 8000446:	7dfb      	ldrb	r3, [r7, #23]
 8000448:	4a0e      	ldr	r2, [pc, #56]	@ (8000484 <LL_TIM_OC_SetMode+0x94>)
 800044a:	5cd3      	ldrb	r3, [r2, r3]
 800044c:	440b      	add	r3, r1
 800044e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	7dfb      	ldrb	r3, [r7, #23]
 8000456:	490c      	ldr	r1, [pc, #48]	@ (8000488 <LL_TIM_OC_SetMode+0x98>)
 8000458:	5ccb      	ldrb	r3, [r1, r3]
 800045a:	4619      	mov	r1, r3
 800045c:	2373      	movs	r3, #115	@ 0x73
 800045e:	408b      	lsls	r3, r1
 8000460:	43db      	mvns	r3, r3
 8000462:	401a      	ands	r2, r3
 8000464:	7dfb      	ldrb	r3, [r7, #23]
 8000466:	4908      	ldr	r1, [pc, #32]	@ (8000488 <LL_TIM_OC_SetMode+0x98>)
 8000468:	5ccb      	ldrb	r3, [r1, r3]
 800046a:	4619      	mov	r1, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	408b      	lsls	r3, r1
 8000470:	431a      	orrs	r2, r3
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	601a      	str	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	371c      	adds	r7, #28
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	080005c8 	.word	0x080005c8
 8000488:	080005d0 	.word	0x080005d0

0800048c <main>:


void tim2_oc_init(void);
void led_init(void);

int main(){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

	tim2_oc_init();
 8000490:	f000 f804 	bl	800049c <tim2_oc_init>
	led_init();
 8000494:	f000 f82a 	bl	80004ec <led_init>


	while(1){
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <main+0xc>

0800049c <tim2_oc_init>:



}

void tim2_oc_init(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

	//Enable clock access to TIM2 module
	LL_APB1_GRP1_EnableClock (LL_APB1_GRP1_PERIPH_TIM2);
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff fec7 	bl	8000234 <LL_APB1_GRP1_EnableClock>

	//Set the prescaler
	LL_TIM_SetPrescaler (TIM2, 1600-1); // 16 000 000 MHz /1600 = 10 000
 80004a6:	f240 613f 	movw	r1, #1599	@ 0x63f
 80004aa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004ae:	f7ff ff71 	bl	8000394 <LL_TIM_SetPrescaler>

	//set output compare mode :TOGGLE
	LL_TIM_OC_SetMode (TIM2,LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 80004b2:	2230      	movs	r2, #48	@ 0x30
 80004b4:	2101      	movs	r1, #1
 80004b6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004ba:	f7ff ff99 	bl	80003f0 <LL_TIM_OC_SetMode>

	// enable the channel 1
	LL_TIM_CC_EnableChannel (TIM2, LL_TIM_CHANNEL_CH1);
 80004be:	2101      	movs	r1, #1
 80004c0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004c4:	f7ff ff82 	bl	80003cc <LL_TIM_CC_EnableChannel>
	//Set auto-reload value
	LL_TIM_SetAutoReload (TIM2, 10000 - 1);
 80004c8:	f242 710f 	movw	r1, #9999	@ 0x270f
 80004cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004d0:	f7ff ff6e 	bl	80003b0 <LL_TIM_SetAutoReload>

	//Reset the counter
	LL_TIM_SetCounter(TIM2,0);
 80004d4:	2100      	movs	r1, #0
 80004d6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004da:	f7ff ff4d 	bl	8000378 <LL_TIM_SetCounter>

	// Enable the timer
	LL_TIM_EnableCounter (TIM2);
 80004de:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004e2:	f7ff ff39 	bl	8000358 <LL_TIM_EnableCounter>

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <led_init>:

void led_init(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fe87 	bl	8000204 <LL_AHB1_GRP1_EnableClock>

	//setting the mode of the port A pin 5.
	LL_GPIO_SetPinMode (GPIOA,LL_GPIO_PIN_5 , LL_GPIO_MODE_ALTERNATE);
 80004f6:	2202      	movs	r2, #2
 80004f8:	2120      	movs	r1, #32
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <led_init+0x24>)
 80004fc:	f7ff feb2 	bl	8000264 <LL_GPIO_SetPinMode>

	LL_GPIO_SetAFPin_0_7(GPIOA,LL_GPIO_PIN_5 ,LL_GPIO_AF_1);
 8000500:	2201      	movs	r2, #1
 8000502:	2120      	movs	r1, #32
 8000504:	4802      	ldr	r0, [pc, #8]	@ (8000510 <led_init+0x24>)
 8000506:	f7ff feea 	bl	80002de <LL_GPIO_SetAFPin_0_7>

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40020000 	.word	0x40020000

08000514 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000514:	480d      	ldr	r0, [pc, #52]	@ (800054c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000516:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000518:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480c      	ldr	r0, [pc, #48]	@ (8000550 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490d      	ldr	r1, [pc, #52]	@ (8000554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0a      	ldr	r4, [pc, #40]	@ (8000560 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000542:	f000 f811 	bl	8000568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000546:	f7ff ffa1 	bl	800048c <main>

0800054a <LoopForever>:

LoopForever:
  b LoopForever
 800054a:	e7fe      	b.n	800054a <LoopForever>
  ldr   r0, =_estack
 800054c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000558:	080005e0 	.word	0x080005e0
  ldr r2, =_sbss
 800055c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000560:	2000001c 	.word	0x2000001c

08000564 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC_IRQHandler>
	...

08000568 <__libc_init_array>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	4d0d      	ldr	r5, [pc, #52]	@ (80005a0 <__libc_init_array+0x38>)
 800056c:	4c0d      	ldr	r4, [pc, #52]	@ (80005a4 <__libc_init_array+0x3c>)
 800056e:	1b64      	subs	r4, r4, r5
 8000570:	10a4      	asrs	r4, r4, #2
 8000572:	2600      	movs	r6, #0
 8000574:	42a6      	cmp	r6, r4
 8000576:	d109      	bne.n	800058c <__libc_init_array+0x24>
 8000578:	4d0b      	ldr	r5, [pc, #44]	@ (80005a8 <__libc_init_array+0x40>)
 800057a:	4c0c      	ldr	r4, [pc, #48]	@ (80005ac <__libc_init_array+0x44>)
 800057c:	f000 f818 	bl	80005b0 <_init>
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	10a4      	asrs	r4, r4, #2
 8000584:	2600      	movs	r6, #0
 8000586:	42a6      	cmp	r6, r4
 8000588:	d105      	bne.n	8000596 <__libc_init_array+0x2e>
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000590:	4798      	blx	r3
 8000592:	3601      	adds	r6, #1
 8000594:	e7ee      	b.n	8000574 <__libc_init_array+0xc>
 8000596:	f855 3b04 	ldr.w	r3, [r5], #4
 800059a:	4798      	blx	r3
 800059c:	3601      	adds	r6, #1
 800059e:	e7f2      	b.n	8000586 <__libc_init_array+0x1e>
 80005a0:	080005d8 	.word	0x080005d8
 80005a4:	080005d8 	.word	0x080005d8
 80005a8:	080005d8 	.word	0x080005d8
 80005ac:	080005dc 	.word	0x080005dc

080005b0 <_init>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr

080005bc <_fini>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr

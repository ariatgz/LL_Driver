
2_GPIO_INPUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  08000424  00001424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00001424  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00001424  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  08000424  00001424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0000141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000424  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000424  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000527  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001cc  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004a  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d74  00000000  00000000  00001c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006c2  00000000  00000000  0001a976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4a4  00000000  00000000  0001b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a74dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000120  00000000  00000000  000a7520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000a7640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000404 	.word	0x08000404

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000404 	.word	0x08000404

08000204 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800020c:	4b08      	ldr	r3, [pc, #32]	@ (8000230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800020e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000210:	4907      	ldr	r1, [pc, #28]	@ (8000230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4313      	orrs	r3, r2
 8000216:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000218:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800021a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4013      	ands	r3, r2
 8000220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000222:	68fb      	ldr	r3, [r7, #12]
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	40023800 	.word	0x40023800

08000234 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000234:	b480      	push	{r7}
 8000236:	b08b      	sub	sp, #44	@ 0x2c
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	fa93 f3a3 	rbit	r3, r3
 800024e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000250:	693b      	ldr	r3, [r7, #16]
 8000252:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000254:	69bb      	ldr	r3, [r7, #24]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d101      	bne.n	800025e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800025a:	2320      	movs	r3, #32
 800025c:	e003      	b.n	8000266 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800025e:	69bb      	ldr	r3, [r7, #24]
 8000260:	fab3 f383 	clz	r3, r3
 8000264:	b2db      	uxtb	r3, r3
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	2103      	movs	r1, #3
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	43db      	mvns	r3, r3
 8000270:	401a      	ands	r2, r3
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000276:	6a3b      	ldr	r3, [r7, #32]
 8000278:	fa93 f3a3 	rbit	r3, r3
 800027c:	61fb      	str	r3, [r7, #28]
  return result;
 800027e:	69fb      	ldr	r3, [r7, #28]
 8000280:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000284:	2b00      	cmp	r3, #0
 8000286:	d101      	bne.n	800028c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000288:	2320      	movs	r3, #32
 800028a:	e003      	b.n	8000294 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800028c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	b2db      	uxtb	r3, r3
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	6879      	ldr	r1, [r7, #4]
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	431a      	orrs	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	372c      	adds	r7, #44	@ 0x2c
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002ae:	b480      	push	{r7}
 80002b0:	b083      	sub	sp, #12
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	691a      	ldr	r2, [r3, #16]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	4013      	ands	r3, r2
 80002c0:	683a      	ldr	r2, [r7, #0]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	bf0c      	ite	eq
 80002c6:	2301      	moveq	r3, #1
 80002c8:	2300      	movne	r3, #0
 80002ca:	b2db      	uxtb	r3, r3
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	683a      	ldr	r2, [r7, #0]
 80002e6:	619a      	str	r2, [r3, #24]
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	041a      	lsls	r2, r3, #16
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	619a      	str	r2, [r3, #24]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
	...

08000314 <main>:
#include"stm32f4xx_ll_bus.h"
#include"stm32f4xx_ll_gpio.h"


int main(){
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

	//Enabling clock access to the port GPIOA
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000318:	2001      	movs	r0, #1
 800031a:	f7ff ff73 	bl	8000204 <LL_AHB1_GRP1_EnableClock>

		//setting the mode of the port A pin 5.
	LL_GPIO_SetPinMode (GPIOA,LL_GPIO_PIN_5 , LL_GPIO_MODE_OUTPUT);
 800031e:	2201      	movs	r2, #1
 8000320:	2120      	movs	r1, #32
 8000322:	480f      	ldr	r0, [pc, #60]	@ (8000360 <main+0x4c>)
 8000324:	f7ff ff86 	bl	8000234 <LL_GPIO_SetPinMode>

		//Enabling clock access to the port GPIOC
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000328:	2004      	movs	r0, #4
 800032a:	f7ff ff6b 	bl	8000204 <LL_AHB1_GRP1_EnableClock>

		//setting the mode of the port c pin 13.
	LL_GPIO_SetPinMode (GPIOC,LL_GPIO_PIN_13 , LL_GPIO_MODE_INPUT);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000334:	480b      	ldr	r0, [pc, #44]	@ (8000364 <main+0x50>)
 8000336:	f7ff ff7d 	bl	8000234 <LL_GPIO_SetPinMode>



	while(1){
		if(LL_GPIO_IsInputPinSet(GPIOC,LL_GPIO_PIN_13)){
 800033a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800033e:	4809      	ldr	r0, [pc, #36]	@ (8000364 <main+0x50>)
 8000340:	f7ff ffb5 	bl	80002ae <LL_GPIO_IsInputPinSet>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d004      	beq.n	8000354 <main+0x40>

			LL_GPIO_ResetOutputPin (GPIOA, LL_GPIO_PIN_5);
 800034a:	2120      	movs	r1, #32
 800034c:	4804      	ldr	r0, [pc, #16]	@ (8000360 <main+0x4c>)
 800034e:	f7ff ffd1 	bl	80002f4 <LL_GPIO_ResetOutputPin>
 8000352:	e7f2      	b.n	800033a <main+0x26>
		}else{

			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000354:	2120      	movs	r1, #32
 8000356:	4802      	ldr	r0, [pc, #8]	@ (8000360 <main+0x4c>)
 8000358:	f7ff ffbe 	bl	80002d8 <LL_GPIO_SetOutputPin>
		if(LL_GPIO_IsInputPinSet(GPIOC,LL_GPIO_PIN_13)){
 800035c:	e7ed      	b.n	800033a <main+0x26>
 800035e:	bf00      	nop
 8000360:	40020000 	.word	0x40020000
 8000364:	40020800 	.word	0x40020800

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	@ (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	@ (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	@ (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	@ (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ffbb 	bl	8000314 <main>

0800039e <LoopForever>:

LoopForever:
  b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ac:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 80003b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b4:	2000001c 	.word	0x2000001c

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4d0d      	ldr	r5, [pc, #52]	@ (80003f4 <__libc_init_array+0x38>)
 80003c0:	4c0d      	ldr	r4, [pc, #52]	@ (80003f8 <__libc_init_array+0x3c>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	2600      	movs	r6, #0
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	4d0b      	ldr	r5, [pc, #44]	@ (80003fc <__libc_init_array+0x40>)
 80003ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000400 <__libc_init_array+0x44>)
 80003d0:	f000 f818 	bl	8000404 <_init>
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	10a4      	asrs	r4, r4, #2
 80003d8:	2600      	movs	r6, #0
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

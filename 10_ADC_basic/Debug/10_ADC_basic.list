
10_ADC_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000039c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000560  08000568  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000560  08000560  00001568  2**0
                  CONTENTS
  4 .ARM          00000000  08000560  08000560  00001568  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000560  08000568  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000560  08000560  00001560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000564  08000564  00001564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000568  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000568  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000079c  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000022c  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00001f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006e  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198de  00000000  00000000  0000206e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007bb  00000000  00000000  0001b94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009446b  00000000  00000000  0001c107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0572  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  000b05b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b07bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000548 	.word	0x08000548

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000548 	.word	0x08000548

08000204 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800020c:	4b08      	ldr	r3, [pc, #32]	@ (8000230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800020e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000210:	4907      	ldr	r1, [pc, #28]	@ (8000230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4313      	orrs	r3, r2
 8000216:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000218:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800021a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4013      	ands	r3, r2
 8000220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000222:	68fb      	ldr	r3, [r7, #12]
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	40023800 	.word	0x40023800

08000234 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800023c:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <LL_APB2_GRP1_EnableClock+0x2c>)
 800023e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000240:	4907      	ldr	r1, [pc, #28]	@ (8000260 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4313      	orrs	r3, r2
 8000246:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <LL_APB2_GRP1_EnableClock+0x2c>)
 800024a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4013      	ands	r3, r2
 8000250:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000252:	68fb      	ldr	r3, [r7, #12]
}
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	40023800 	.word	0x40023800

08000264 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000264:	b480      	push	{r7}
 8000266:	b08b      	sub	sp, #44	@ 0x2c
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	fa93 f3a3 	rbit	r3, r3
 800027e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d101      	bne.n	800028e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800028a:	2320      	movs	r3, #32
 800028c:	e003      	b.n	8000296 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	fab3 f383 	clz	r3, r3
 8000294:	b2db      	uxtb	r3, r3
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	2103      	movs	r1, #3
 800029a:	fa01 f303 	lsl.w	r3, r1, r3
 800029e:	43db      	mvns	r3, r3
 80002a0:	401a      	ands	r2, r3
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a6:	6a3b      	ldr	r3, [r7, #32]
 80002a8:	fa93 f3a3 	rbit	r3, r3
 80002ac:	61fb      	str	r3, [r7, #28]
  return result;
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80002b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80002b8:	2320      	movs	r3, #32
 80002ba:	e003      	b.n	80002c4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80002bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002be:	fab3 f383 	clz	r3, r3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	6879      	ldr	r1, [r7, #4]
 80002c8:	fa01 f303 	lsl.w	r3, r1, r3
 80002cc:	431a      	orrs	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	601a      	str	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	372c      	adds	r7, #44	@ 0x2c
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <LL_ADC_REG_SetTriggerSource>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
  *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
 80002de:	b480      	push	{r7}
 80002e0:	b083      	sub	sp, #12
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
 80002e6:	6039      	str	r1, [r7, #0]
  /* Note: On this STM32 series, ADC group regular external trigger edge        */
  /*       is used to perform a ADC conversion start.                           */
  /*       This function does not set external trigger edge.                    */
  /*       This feature is set using function                                   */
  /*       @ref LL_ADC_REG_StartConversionExtTrig().                            */
  MODIFY_REG(ADCx->CR2, ADC_CR2_EXTSEL, (TriggerSource & ADC_CR2_EXTSEL));
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80002f6:	431a      	orrs	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	609a      	str	r2, [r3, #8]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000316:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	431a      	orrs	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800032e:	b480      	push	{r7}
 8000330:	b089      	sub	sp, #36	@ 0x24
 8000332:	af00      	add	r7, sp, #0
 8000334:	60f8      	str	r0, [r7, #12]
 8000336:	60b9      	str	r1, [r7, #8]
 8000338:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	332c      	adds	r3, #44	@ 0x2c
 800033e:	4619      	mov	r1, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000346:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800034a:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800034c:	697a      	ldr	r2, [r7, #20]
 800034e:	fa92 f2a2 	rbit	r2, r2
 8000352:	613a      	str	r2, [r7, #16]
  return result;
 8000354:	693a      	ldr	r2, [r7, #16]
 8000356:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8000358:	69ba      	ldr	r2, [r7, #24]
 800035a:	2a00      	cmp	r2, #0
 800035c:	d101      	bne.n	8000362 <LL_ADC_REG_SetSequencerRanks+0x34>
    return 32U;
 800035e:	2220      	movs	r2, #32
 8000360:	e003      	b.n	800036a <LL_ADC_REG_SetSequencerRanks+0x3c>
  return __builtin_clz(value);
 8000362:	69ba      	ldr	r2, [r7, #24]
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	40d3      	lsrs	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	440b      	add	r3, r1
 8000370:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f003 031f 	and.w	r3, r3, #31
 800037c:	211f      	movs	r1, #31
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43db      	mvns	r3, r3
 8000384:	401a      	ands	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f003 011f 	and.w	r1, r3, #31
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	f003 031f 	and.w	r3, r3, #31
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	431a      	orrs	r2, r3
 8000398:	69fb      	ldr	r3, [r7, #28]
 800039a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800039c:	bf00      	nop
 800039e:	3724      	adds	r7, #36	@ 0x24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	f043 0201 	orr.w	r2, r3, #1
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	609a      	str	r2, [r3, #8]
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	609a      	str	r2, [r3, #8]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <LL_ADC_REG_ReadConversionData32>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f4:	b29b      	uxth	r3, r3
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0302 	and.w	r3, r3, #2
 8000412:	2b02      	cmp	r3, #2
 8000414:	bf0c      	ite	eq
 8000416:	2301      	moveq	r3, #1
 8000418:	2300      	movne	r3, #0
 800041a:	b2db      	uxtb	r3, r3
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <main>:

void adc123_init(void);

uint32_t volatile sensor_value=0;

int main(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

	adc123_init();
 800042c:	f000 f816 	bl	800045c <adc123_init>

	while(1){

		// start adc sampling
		LL_ADC_REG_StartConversionSWStart (ADC1);
 8000430:	4808      	ldr	r0, [pc, #32]	@ (8000454 <main+0x2c>)
 8000432:	f7ff ffc9 	bl	80003c8 <LL_ADC_REG_StartConversionSWStart>

		// wait for conversion to complete
		while(!LL_ADC_IsActiveFlag_EOCS (ADC1)){}
 8000436:	bf00      	nop
 8000438:	4806      	ldr	r0, [pc, #24]	@ (8000454 <main+0x2c>)
 800043a:	f7ff ffe2 	bl	8000402 <LL_ADC_IsActiveFlag_EOCS>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0f9      	beq.n	8000438 <main+0x10>

		// read converted value
		sensor_value=LL_ADC_REG_ReadConversionData32(ADC1);
 8000444:	4803      	ldr	r0, [pc, #12]	@ (8000454 <main+0x2c>)
 8000446:	f7ff ffcf 	bl	80003e8 <LL_ADC_REG_ReadConversionData32>
 800044a:	4603      	mov	r3, r0
 800044c:	4a02      	ldr	r2, [pc, #8]	@ (8000458 <main+0x30>)
 800044e:	6013      	str	r3, [r2, #0]
		LL_ADC_REG_StartConversionSWStart (ADC1);
 8000450:	e7ee      	b.n	8000430 <main+0x8>
 8000452:	bf00      	nop
 8000454:	40012000 	.word	0x40012000
 8000458:	2000001c 	.word	0x2000001c

0800045c <adc123_init>:



}

void adc123_init(){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000460:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000464:	f7ff fee6 	bl	8000234 <LL_APB2_GRP1_EnableClock>

	//Enabling clock access to the port GPIOA
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000468:	2001      	movs	r0, #1
 800046a:	f7ff fecb 	bl	8000204 <LL_AHB1_GRP1_EnableClock>

	LL_GPIO_SetPinMode(GPIOA,LL_GPIO_PIN_1 , LL_GPIO_MODE_ANALOG);
 800046e:	2203      	movs	r2, #3
 8000470:	2102      	movs	r1, #2
 8000472:	480b      	ldr	r0, [pc, #44]	@ (80004a0 <adc123_init+0x44>)
 8000474:	f7ff fef6 	bl	8000264 <LL_GPIO_SetPinMode>

	LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_SOFTWARE);
 8000478:	2100      	movs	r1, #0
 800047a:	480a      	ldr	r0, [pc, #40]	@ (80004a4 <adc123_init+0x48>)
 800047c:	f7ff ff2f 	bl	80002de <LL_ADC_REG_SetTriggerSource>

	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1,LL_ADC_CHANNEL_1);
 8000480:	4a09      	ldr	r2, [pc, #36]	@ (80004a8 <adc123_init+0x4c>)
 8000482:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000486:	4807      	ldr	r0, [pc, #28]	@ (80004a4 <adc123_init+0x48>)
 8000488:	f7ff ff51 	bl	800032e <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_SetSequencerLength(ADC1,LL_ADC_REG_SEQ_SCAN_DISABLE);
 800048c:	2100      	movs	r1, #0
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <adc123_init+0x48>)
 8000490:	f7ff ff3a 	bl	8000308 <LL_ADC_REG_SetSequencerLength>

	LL_ADC_Enable(ADC1);
 8000494:	4803      	ldr	r0, [pc, #12]	@ (80004a4 <adc123_init+0x48>)
 8000496:	f7ff ff87 	bl	80003a8 <LL_ADC_Enable>

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40012000 	.word	0x40012000
 80004a8:	02300001 	.word	0x02300001

080004ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004ac:	480d      	ldr	r0, [pc, #52]	@ (80004e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b4:	480c      	ldr	r0, [pc, #48]	@ (80004e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b6:	490d      	ldr	r1, [pc, #52]	@ (80004ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b8:	4a0d      	ldr	r2, [pc, #52]	@ (80004f0 <LoopForever+0xe>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004bc:	e002      	b.n	80004c4 <LoopCopyDataInit>

080004be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c2:	3304      	adds	r3, #4

080004c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c8:	d3f9      	bcc.n	80004be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ca:	4a0a      	ldr	r2, [pc, #40]	@ (80004f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004cc:	4c0a      	ldr	r4, [pc, #40]	@ (80004f8 <LoopForever+0x16>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d0:	e001      	b.n	80004d6 <LoopFillZerobss>

080004d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d4:	3204      	adds	r2, #4

080004d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d8:	d3fb      	bcc.n	80004d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004da:	f000 f811 	bl	8000500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004de:	f7ff ffa3 	bl	8000428 <main>

080004e2 <LoopForever>:

LoopForever:
  b LoopForever
 80004e2:	e7fe      	b.n	80004e2 <LoopForever>
  ldr   r0, =_estack
 80004e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004f0:	08000568 	.word	0x08000568
  ldr r2, =_sbss
 80004f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004f8:	20000020 	.word	0x20000020

080004fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004fc:	e7fe      	b.n	80004fc <ADC_IRQHandler>
	...

08000500 <__libc_init_array>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	4d0d      	ldr	r5, [pc, #52]	@ (8000538 <__libc_init_array+0x38>)
 8000504:	4c0d      	ldr	r4, [pc, #52]	@ (800053c <__libc_init_array+0x3c>)
 8000506:	1b64      	subs	r4, r4, r5
 8000508:	10a4      	asrs	r4, r4, #2
 800050a:	2600      	movs	r6, #0
 800050c:	42a6      	cmp	r6, r4
 800050e:	d109      	bne.n	8000524 <__libc_init_array+0x24>
 8000510:	4d0b      	ldr	r5, [pc, #44]	@ (8000540 <__libc_init_array+0x40>)
 8000512:	4c0c      	ldr	r4, [pc, #48]	@ (8000544 <__libc_init_array+0x44>)
 8000514:	f000 f818 	bl	8000548 <_init>
 8000518:	1b64      	subs	r4, r4, r5
 800051a:	10a4      	asrs	r4, r4, #2
 800051c:	2600      	movs	r6, #0
 800051e:	42a6      	cmp	r6, r4
 8000520:	d105      	bne.n	800052e <__libc_init_array+0x2e>
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	f855 3b04 	ldr.w	r3, [r5], #4
 8000528:	4798      	blx	r3
 800052a:	3601      	adds	r6, #1
 800052c:	e7ee      	b.n	800050c <__libc_init_array+0xc>
 800052e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000532:	4798      	blx	r3
 8000534:	3601      	adds	r6, #1
 8000536:	e7f2      	b.n	800051e <__libc_init_array+0x1e>
 8000538:	08000560 	.word	0x08000560
 800053c:	08000560 	.word	0x08000560
 8000540:	08000560 	.word	0x08000560
 8000544:	08000564 	.word	0x08000564

08000548 <_init>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop
 800054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054e:	bc08      	pop	{r3}
 8000550:	469e      	mov	lr, r3
 8000552:	4770      	bx	lr

08000554 <_fini>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr
